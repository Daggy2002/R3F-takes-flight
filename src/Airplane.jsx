/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.7 public/assets/models/airplane.glb
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';
import { Matrix3, Matrix4, Quaternion, Vector3 } from 'three';
import { controls, updatePlaneAxis } from './controls';

const x = new Vector3(1, 0, 0);
const y = new Vector3(0, 1, 0);
const z = new Vector3(0, 0, 1);

const delayedRotMatrix = new Matrix4();

export function Airplane(props) {
  const { nodes, materials } = useGLTF('assets/models/airplane.glb');
  const groupRef = useRef();
  const helixMeshRef = useRef();

  useFrame(({ camera }) => {
    const rotMatrix = new Matrix4();

    updatePlaneAxis(x, y, z);

    // rotMatrix.set(
    //   x.x, x.y, x.z, 0, 
    //   y.x, y.y, y.z, 0, 
    //   z.x, z.y, z.z, 0, 
    //   0, 0, 0, 1
    // );

    rotMatrix.set(
      x.x, y.x, z.x, 0,
      x.y, y.y, z.y, 0,
      x.z, y.z, z.z, 0,
      0, 0, 0, 1
    );

    const matrix = new Matrix4().multiply(rotMatrix);

    groupRef.current.matrixAutoUpdate = false;
    groupRef.current.matrix.copy(matrix);
    groupRef.current.matrixWorldNeedsUpdate = true;




    var quaternionA = new Quaternion();
    quaternionA.setFromRotationMatrix(delayedRotMatrix);
    
    var quaternionB = new Quaternion();
    quaternionB.setFromRotationMatrix(rotMatrix);

    var interpolationFactor = 0.175; 
    var interpolatedQuaternion = new Quaternion().copy(quaternionA);
    interpolatedQuaternion.slerp(quaternionB, interpolationFactor);

    delayedRotMatrix.identity();
    delayedRotMatrix.makeRotationFromQuaternion(interpolatedQuaternion);

    const cameraMatrix = new Matrix4()
      .multiply(delayedRotMatrix)
      .multiply(new Matrix4().makeRotationX(-0.2))
      .multiply(
        new Matrix4().makeTranslation(0, 0.2, 5)
      );

    camera.matrixAutoUpdate = false;
    camera.matrix.copy(cameraMatrix);
    camera.matrixWorldNeedsUpdate = true;

    helixMeshRef.current.rotation.z -= 1.0;
  });

  return (
    <>
      <group ref={groupRef}>
        <group {...props} dispose={null} scale={0.2} rotation-y={Math.PI}>
          <mesh geometry={nodes.supports.geometry} material={materials['Material.004']} />
          <mesh geometry={nodes.chassis.geometry} material={materials['Material.005']} />
          <mesh geometry={nodes.helix.geometry} material={materials['Material.005']} ref={helixMeshRef}/>
        </group>
      </group>
    </>
  )
}

useGLTF.preload('assets/models/airplane.glb')
